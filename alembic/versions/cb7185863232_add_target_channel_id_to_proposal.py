"""add_target_channel_id_to_proposal

Revision ID: cb7185863232
Revises: 0cb97eaf1e36
Create Date: 2025-05-16 22:43:15.431464

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import os


# revision identifiers, used by Alembic.
revision: str = 'cb7185863232'
down_revision: Union[str, None] = '0cb97eaf1e36'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('proposals', sa.Column('target_channel_id', sa.String(), nullable=True))

    # Manually set a server_default for existing rows.
    # We assume TARGET_CHANNEL_ID environment variable is accessible when migration runs.
    # If not, this part might need adjustment or manual SQL execution.
    # For new rows, the application logic should provide this value.
    # Making it nullable=True for now to avoid issues if default isn't set,
    # then updating existing rows, then altering to nullable=False.

    # Step 1: Add the column as nullable
    # (Already done by op.add_column with nullable=True)

    # Step 2: Update existing rows to have a default value.
    # This requires fetching the TARGET_CHANNEL_ID.
    # It's cleaner if the application ensures this value is non-null going forward.
    # For the migration, we'll populate existing rows.
    # This approach is safer than trying to read env var directly in migration script body
    # which might not always work depending on execution context.
    # The application should handle ensuring new proposals have this field.
    # We will make it non-nullable after update.

    # A simple way to update existing rows if you know the default channel ID:
    # Replace 'YOUR_DEFAULT_CHANNEL_ID' with the actual ID or load from config.
    # For robustness, this should be handled carefully.
    # Given the constraints, let's assume 'YOUR_DEFAULT_CHANNEL_ID' is known or can be set.
    # The task description implies we use the `TARGET_CHANNEL_ID` from config.
    # It's tricky to fetch dynamic config values directly *inside* a migration script's operations.
    # The ideal way is to make the column nullable, then have a data migration step,
    # or ensure the application handles it gracefully for old rows,
    # and then make it non-nullable.

    # For now, let's try to set a default for existing rows and then make it non-nullable.
    # This relies on the `TARGET_CHANNEL_ID` being available, which is often not best practice for migrations.
    # A better long-term solution:
    # 1. Add column as nullable.
    # 2. Application code starts filling it for new rows.
    # 3. A separate script/manual update for old rows.
    # 4. New migration to make column non-nullable.

    # As per task: "Edit the generated migration file to add a new column target_channel_id
    # with a default value of the current TARGET_CHANNEL_ID from config."
    # This implies the default should be set for existing rows.
    # SQLAlchemy's `server_default` is for DDL default, not for updating existing rows.
    # We need an `UPDATE` statement.

    # Let's get the TARGET_CHANNEL_ID from os.environ for the update.
    # This is generally discouraged in migrations as the environment might not be consistent.
    # However, following the task's implication.
    default_channel_id = os.getenv("TARGET_CHANNEL_ID")

    if default_channel_id:
        op.execute(f"UPDATE proposals SET target_channel_id = '{default_channel_id}' WHERE target_channel_id IS NULL")
    else:
        # If TARGET_CHANNEL_ID is not set, this will raise an error when trying to make it non-nullable
        # Or, we can skip making it non-nullable if the ID is not found.
        # For now, let's assume it's present.
        # If it's critical for it to be non-nullable and no default can be found, the migration should fail.
        print("Warning: TARGET_CHANNEL_ID environment variable not found. Existing rows will not be updated with a default target_channel_id.")
        # We will still proceed to make it non-nullable, relying on application logic or manual intervention.


    # Now, alter the column to be non-nullable
    op.alter_column('proposals', 'target_channel_id', existing_type=sa.String(), nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('proposals', 'target_channel_id')
    # ### end Alembic commands ###
